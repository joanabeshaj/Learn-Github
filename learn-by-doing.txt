Learning by implementing these tutorials: https://www.youtube.com/playlist?list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV

-------Tutorial 1-------

Create the repository(project) "Learn-Github"
Add the file called concepts.txt 
Add some content into concepts.txt
Press *Commit the new file*
Make a change into the file. Add another concept, for example explain what Fork is
Press *Commit the change*
Use the SUPER POWER of Git. On Learn-Github click on concepts.txt and then on the button called *History*
You'll see different versions of concepts.txt. Each version was created when making a commit.
New lines that were added in the last commit are highlighted in green and have a + sign in front of the line
While lines that were edited or removed appear highlighted in red and have the - sign in front of them
Also while in being inside the commit screen, you could see the unique ID of the commit. This string of letter and numbers is called Commit Hash. You can see the same string appear in the URL as well!


-------Tutorial 2, Part 1-------

Go to the Learn-Github repo, then --> learn-by-doing.txt
Underneath the *Code* menu item you'll see a button that says *Branch: master*
Click on it. Now you'll be able to create a new branch, name it Tutorial 2
Automatically the current branch you're in will change to Branch: Tutorial-2
Start experimenting. Add the steps of Tutorial 2 in learn-by-doing.txt
Afterwards add a comment for the *Commit changes* section
Select *Commit directly to the Tutorial-2 branch*
The second option assumes that IMEDIATELY after doing the editing you realize that this branch was a GREAT IDEA, 
so it's better to start merging this branch with the master branch.
Click the "Commit changes" button*

---Continues---

Now go back to the master branch and you'll see that it HAS NOT CHANGED. It contains only Tutorial 1
*** As you can see branches represent different states/possibilities of the code.(analogy with quantum physics)
I decide that adding the second tutorial to this file was a good idea, so I decide to merge it to the master branch
First I'll save this new commit into the branch and then...

Go back to the Repo and you'll see that a new line(highlighted in yellow) has been added to the interface. It says that 
a branch was created and it has a button "Compare & Pull request". Click this button. 
Now the pull request has started. Add some comments, "Create pull request" and wait for GitHub to check if your pull request is valid.
*** Usually when this branch has edited/added code in different lines of the master branch, there will be no problems to merge the edits. However if the branch edits some code in an existing line of the master there might be some issues. 
Press "Confirm Merge"
Go to repo --> Graphs --> Network to see the visual representation of the merging.


-------Tutorial 2, Part 2-------

In Tutorial 2 we saw how to merge a branch to the master branch that was left unchanged. But what if we create a new branch and then keep on working on the master - can we merge the new branch with the master branch after it has been edited? 
Where will the code of the new branch get added? Lets find out!

Create a new branch called Tut 2 Part 2
Add some text to it --> *Commit directly to the Tut-2-Part-2 branch* --> *Commit changes*
Then keep on adding Tutorial 3 to the master branch
